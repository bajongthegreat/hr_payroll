<?php

class ReportsController extends BaseController {

	protected $employees;

	  /**
     * Instantiate a new UserController instance.
     */
    public function __construct()
    {
    	parent::__construct();
    	
        $this->beforeFilter('csrf', array('on' => 'post'));

        $this->afterFilter('log', array('only' =>
                            array('fooAction', 'barAction')));

        $this->employees = App::make('Acme\Repositories\Employee\EmployeeRepositoryInterface');
    }

    public function index() {
    


    }

    public function create_dpc_excel() {
    		$month = date('m'); 

    	$data = DB::table('disciplinary_actions')->where(DB::raw('MONTH(violation_date)'), '=', $month)
    									 ->whereNull('disciplinary_actions.deleted_at')
    	                                 ->leftJoin('employees', 'employees.id', '=', 'disciplinary_actions.employee_id')
    	                                 ->leftJoin('positions', 'employees.position_id', '=', 'positions.id')
    	                                 ->leftJoin('departments', 'departments.id', '=', 'positions.department_id')
    	                                 ->leftJoin('violations', 'violations.id', '=', 'disciplinary_actions.violation_id')
    	                                 ->select('employees.lastname', 'employees.firstname', 'employees.middlename', 'employees.name_extension',
    	                                 		   DB::raw('CONCAT_WS(\' \', COALESCE(employees.firstname, ""), COALESCE(employees.middlename, "") ,COALESCE(employees.lastname, ""), COALESCE(employees.name_extension, "") )  AS name'),
    	                                 	       'departments.name as department_name', 'positions.name as position_name', 'disciplinary_actions.violation_date', 'disciplinary_actions.violation_effectivity_date', 'violations.code as violation_code', 'violations.description as violation_description', DB::raw('COUNT(*) as offense__number ') ,DB::raw('(SELECT punishment_type FROM violations_offenses WHERE violations_offenses.violation_id = violations.id AND offense_number = (SELECT COUNT(*) FROM disciplinary_actions WHERE violation_id = violations.id AND employee_id = employees.id AND MONTH(disciplinary_actions.violation_date) = ' . $month .' ) ) as penalty'))
    	                                 ->groupBy('disciplinary_actions.employee_id', 'violations.id', 'disciplinary_actions.violation_date')
    	                                 ->get();

    	return $this->dpc($data, $month);
    }



    public function employee_index() {
    	return View::make('reports.employee.index');
    }




    public function dpc($data, $month) {

    	$type = 'Yearly';

    	$dateObj   = DateTime::createFromFormat('!m', $month);
		$monthName = $dateObj->format('F'); // March
		
		$headers = ['TIBUD SA KATIBAWASAN MULTI-PURPOSE COOPERATIVE',
					'Purok RaÃ±ada, Brgy. Poblacion, Polomolok, South Cotabato',
					'CDA Registration No. 9520-12008158; Tel. No. (083) 500-8467',
					'',
					'DISCIPLINARY ACTIONS MONITORING SHEET',
					'FOR THE MONTH OF ' . $monthName
					];

		$tableHeaders = ['', 
		                 'Employee Name',
		                 'Department',
		                 'Date of Violation',
		                 'Effectivity date of suspension',
		                 'Violation Description',
		                 'Code of Conduct Reference',
		                 'Penalty'
		                 ];

		$header_starting_index =  9;

		$phpExcelWrapper = new jamesPHPexcelWrapper( new PHPExcel() );

		// Setup excel properties
		$phpExcelWrapper->setUp('DPC Monitoring Sheet (Yearly)', 'HR');

		// Excel Headers
		$phpExcelWrapper->setHeader($headers)
		                ->setColumnWidth([5,30,30,15,15,60,20, 15]);

		// Table headers
		$phpExcelWrapper->setTableHeader($tableHeaders)
						->setData( $data, ['i', 'name', 'department_name', 'violation_date', 'violation_effectivity_date', 'violation_description','violation_code','penalty']);


		// Get phpExcel Object generated by wrapper
 		$phpExcelWrapper->setFilename('DPC Monthly Report')
 						->timestamp('date')
 						->setHTMLheaders()
 		                ->get();


		// $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');
		//  return $objWriter->save('php://output');
		
 		return $phpExcelWrapper->save();

    }

    public function create_employee_masterlist_excel() {
	

		$headers = ['TIBUD SA KATIBAWASAN MULTI-PURPOSE COOPERATIVE',
					'Purok RaÃ±ada, Brgy. Poblacion, Polomolok, South Cotabato',
					'CDA Registration No. 9520-12008158; Tel. No. (083) 500-8467',
					'',
					'Employee Masterlist'				
					];

		$tableHeaders = ['ID Number',
		                 'Last Name',
		                 'First Name',
		                 'Middle Name',
		                 'Name Extension'
		                 ];

		$data = $this->employees->all()->toArray();

		$phpExcelWrapper = new jamesPHPexcelWrapper( new PHPExcel() );

		// Setup excel properties
		$phpExcelWrapper->setUp('Employee Master list', 'HR');

		// Excel Headers
		$phpExcelWrapper->setHeader($headers)
		                ->setColumnWidth([15,15,15,15,15]);

		// Table headers
		$phpExcelWrapper->setTableHeader($tableHeaders)
						->setData( $data, ['employee_work_id','lastname', 'firstname', 'middlename', 'name_extension']);


		// Get phpExcel Object generated by wrapper
 		$objPHPExcel = $phpExcelWrapper->setFileName('Employee Masterlist')
 									   ->timestamp('date')
 									   ->setHTMLheaders()
 		                               ->get();


 		return $phpExcelWrapper->save();
	}

    public function create_sss_monthly_report() {
		
		$month = Input::get('month');
		$year = Input::get('year');


		$headers = ['SSS FORM ML-2 (Rev.1/92)',
					'',
					'Republic of the philippines',
					'Social Security System',
					'General Santos City',
					'Collection list',
					'',
					'Name of Employer: ' . Config::get('company.name.full'),
					'ID No. of Employer: ' . Config::get('company.files.sss_reg'),
					'',
					'Applicable Qtr: '. strtoupper(monthName($month)) .' ' . $year				
					];

		$tableHeaders = ['',
		                 'SSS Number',
		                 'Last Name',
		                 'First name',
		                 'Middle Name',
		                 'Name Extension',
		                 'Date granted',
		                 'Amount of Loan',
		                 'Current Amount Due',
		                 'Overdue',
		                 'Total Amount Due',
		                 'Remarks'
		                 ];

		$data = DB::table('sss_loans')->where(DB::raw('MONTH(sss_loans_remittance.post_date)'), '=', $month)
									  ->where(DB::raw('YEAR(sss_loans_remittance.post_date)'), '=', $year)
									  ->leftJoin('employees', 'sss_loans.employee_id', '=', 'employees.id')
		                              ->leftJoin('sss_loans_remittance', 'sss_loans_remittance.sss_loan_id', '=', 'sss_loans.id')
		                              ->select('employees.sss_id', 'employees.lastname', 'employees.firstname', 'employees.middlename', 'employees.name_extension', 
		                              	       'sss_loans.check_date', 'sss_loans.loan_amount','sss_loans_remittance.amount')
		                              ->get();

		$phpExcelWrapper = new jamesPHPexcelWrapper( new PHPExcel() );

		// Setup excel properties
		$phpExcelWrapper->setUp('SSS Monthly Report', 'HR');

		// Excel Headers
		$phpExcelWrapper->setHeader($headers, 2, 'A', 'P')
		                ->setColumnWidth([5,15,15,15,15,10, 20, 20, 15, 20, 15]);

		// Table headers
		$phpExcelWrapper->setTableHeader($tableHeaders)
		                ->setNumberFormat('comma', 'H', 'K', 50)
						->setData( $data, ['i', 'sss_id', 'lastname', 'firstname', 'middlename', 'name_extension', 'check_date', 'loan_amount', 'amount', '_n', 'amount', '__']);


		// Get phpExcel Object generated by wrapper
 		$objPHPExcel = $phpExcelWrapper->setFileName('Employee Masterlist')
 									   ->timestamp('date')
 									   ->setHTMLheaders()
 		                               ->get();

 		return $phpExcelWrapper->save();
	}	

}
